type User @aws_iam @aws_cognito_user_pools{
    UserId: String!
    Username: String
    Name: String
    Books: [Book]
    Friends: [Friend]
}

type Book @aws_cognito_user_pools{
    UserId: String!
    BookId: String
    CreatedTime: String
    Title: String
}

type Transaction {
    BookId: String!
    TransactionId: String!
    UserId: String!
    Title: String!
    Amount: Int!
    Catergory: String!
    Description: String!
    CreatedTime: String!
    UpdatedTime: String!
    LastChangeBy: User
    IsApproved: Boolean
}

type Friend @aws_iam @aws_cognito_user_pools{
    UserId: String!
    FriendId: String
    Status: StateType
    ConversationId: String
    CreatedTime: AWSDateTime
    UpdatedTime: AWSDateTime
    UserInfo: User
    ConvoInfo: MessageConnection
}

type MessageConnection {
    items: [Message]
    nextToken: String
}

type Message {
    ConversationId: String!
    MessageId: String
    AuthorId: String
    MessageInfo: String
    CreatedTime: AWSDateTime
}

type Query {
    getUser: User
    getFriends: [Friend]
    getTransactions(input: String!): [Transaction]
    getMessage(input: String!): MessageConnection
}

type Mutation {
    postTransaction(input: TransactionInput!): String!
    addFriend(input: FriendInput!): Friend! @aws_iam @aws_cognito_user_pools
    approveFriend(input: FriendInput!): Friend! @aws_iam @aws_cognito_user_pools
    deleteFriend(input: FriendInput!): Friend! @aws_iam @aws_cognito_user_pools
    createMessage(input: MessageInput!): Message!
}

type Subscription {
    onAddFriend(UserId: String!): Friend @aws_subscribe(mutations: ["addFriend"]) @aws_cognito_user_pools
    onApproveFriend(UserId: String!): Friend @aws_subscribe(mutations: ["approveFriend"]) @aws_cognito_user_pools
    onDeleteFriend(UserId: String!): Friend @aws_subscribe(mutations: ["deleteFriend"]) @aws_cognito_user_pools
    onCreateMessage(ConversationId: String!, AuthorId: String!): Message @aws_subscribe(mutations: ["createMessage"]) @aws_cognito_user_pools
}

input MessageInput {
    ConversationId: String!
    MessageInfo: String!
}

input TransactionInput {
    BookId: String!
    OwnerId: String!
    TransactionId: ID
    Title: String!
    Amount: Int!
    Catergory: String!
    Description: String!
    CreatedTime: AWSDateTime
    UpdatedTime: AWSDateTime
}

input FriendInput {
    UserId: String
    FriendId: String!    
    ConversationId: String
    Status: StateType
}

enum StateType {
  REQUESTED
  PENDING
  FRIENDS
}